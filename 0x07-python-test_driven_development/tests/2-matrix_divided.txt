#!/usr/bin/python3
"""
Test script for matrix_divided function.
"""
import unittest
matrix_divided = __import__('2-matrix_divided').matrix_divided

class TestMatrixDivided(unittest.TestCase):

    def test_regular_division(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ]
        divisor = 2
        result = matrix_divided(matrix, divisor)
        expected_result = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
        self.assertEqual(result, expected_result)

    def test_division_with_float_divisor(self):
        matrix = [
            [1.0, 2.0, 3.0],
            [4.0, 5.0, 6.0]
        ]
        divisor = 2.5
        result = matrix_divided(matrix, divisor)
        expected_result = [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]
        self.assertEqual(result, expected_result)

    def test_division_by_zero(self):
        matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ]
        divisor = 0
        with self.assertRaises(ZeroDivisionError) as context:
            result = matrix_divided(matrix, divisor)
        self.assertEqual(str(context.exception), "division by zero")

    def test_matrix_with_non_number_elements(self):
        matrix = [
            [1, 2, 'a'],
            [4, 5, 6]
        ]
        divisor = 2
        with self.assertRaises(TypeError) as context:
            result = matrix_divided(matrix, divisor)
        self.assertEqual(
            str(context.exception),
            "matrix must be a matrix (list of lists) of integers/floats"
        )

if __name__ == "__main__":
    unittest.main()
